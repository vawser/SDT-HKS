function Initialize()
    collectgarbage("setstepmul", 100)
    g_isUpperAction = FALSE
    g_wallJumpCount = 0
    g_airSubAttackCount = 0
    g_AddElectroCharge = FALSE
    g_EndSubWeaponChange = FALSE
    g_beforeMoveSpeedIndex = 0
    g_beforeMoveDirection = 0
    g_enableTransitSprint = FALSE
    g_beforeFireLand = -1
    g_beforeSubAttackType = 0
    g_beforeSpAttackNum = 0
    g_beforeItemAnmType = 0
    g_enableSpAttaclkJump = TRUE
    g_forceCrouch = FALSE
    g_autoAimTime = 1
    g_autoAimFlag = FALSE
    g_behaviorValidateOrderByStyle = {}
    g_addBehaviorActionValidateOrderByStyle = {}
    g_addBehaviorReactionValidateOrderByStyle = {}
    ValidateOrderTableInit()
end

function FireEvent(state)
    hkbFireEvent(state)
    ResetRequest()
    return
end

function FireEventNoReset(state)
    hkbFireEvent(state)
    return
end

function FireEvents(...)
    local buff = {...}
    for f4_local1 = 1, #buff, 1 do
        FireEvent(buff[f4_local1])
    end
    return

end

function IsNodeActive(...)
    local buff = {...}
    for f5_local1 = 1, #buff, 1 do
        if hkbIsNodeActive(buff[f5_local1]) then
            return TRUE
        end
    end
    return FALSE

end

function SetVariable(name, value)
    act(148, name, value)
end

function SetMoveType()
    if env(1116, 100130) == TRUE then
        SetVariable("MoveType", ConvergeValue(1, hkbGetVariable("MoveType"), 5, 5))
        SetVariable("StanceMoveType", 1)
        return
    elseif env(1116, 100140) == TRUE then
        SetVariable("MoveType", ConvergeValue(1, hkbGetVariable("MoveType"), 5, 5))
        SetVariable("StanceMoveType", 1)
        return
    elseif env(1116, 100150) == TRUE then
        SetVariable("MoveType", ConvergeValue(1, hkbGetVariable("MoveType"), 5, 5))
        SetVariable("StanceMoveType", 0)
        return
    elseif env(1116, 100160) == TRUE then
        SetVariable("MoveType", ConvergeValue(1, hkbGetVariable("MoveType"), 5, 5))
        SetVariable("StanceMoveType", 0)
        return
    else
        SetVariable("MoveType", ConvergeValue(0, hkbGetVariable("MoveType"), 5, 5))
        return
    end
end

function GetMoveSpeed(stick_level)
    local speed = hkbGetVariable("MoveSpeedLevelReal")
    local inc_val = 3
    local dec_val = 3
    if stick_level == 2 then
        inc_val = 6
    end
    local ret = ConvergeValue(stick_level, speed, inc_val, dec_val)
    return ret
end

function GetRandomIndex(max, before_index)
    local msg_array = {}
    local ret = 0
    for f9_local2 = 0, max, 1 do
        if 0 <= before_index and before_index <= max and f9_local2 == before_index then
        else
            table.insert(msg_array, f9_local2)
        end
    end
    if 0 < #msg_array then
        local rand = math.random(0, #msg_array)
        ret = msg_array[rand]
    elseif is_expect_cur_index then
        ret = 0
    end
    return ret

end

function Update()
    g_isUpperAction = FALSE
    if env(256) == TRUE and env(1007) == FALSE then
        act(2002, SP_EFFECT_DEACTIVATE_HP_AUTO_CHARGE)
    end
    act(101, FALSE)
    SetVariable("NightvisionMoveSpeedIndex", hkbGetVariable("MoveSpeedIndex") + 1)
    act(2015, 0, 0)
    SetMoveType()
    g_FrameCount = g_FrameCount + 1
end

function ModifiersLayer_onGenerate()
end

function ResetRequest()
    act(9101)
end

function _LandReset()
    g_wallJumpCount = 0
    g_airSubAttackCount = 0
end

function GetStyleType(current_hkb_state)
    return g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
end

function GetStateType(current_hkb_state)
    return g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
end

function InitState()
    act(136, 0)
    if g_autoAimFlag == TRUE then
        _StopAutoAim()
    end
    if env(3037) == TRUE and env(3036, SP_EF_REF_FORCE_CROUCH) == FALSE then
        g_forceCrouch = FALSE
    else
        g_forceCrouch = TRUE
    end
    local loadInitPose = env(3055)
    local returnType = env(3061)
    if returnType ~= SAFE_POS_RETURN_TYPE_NONE then
        if returnType == SAFE_POS_RETURN_TYPE_STAND then
            if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
                FireEvent("W_AgingMapEnter")
            else
                FireEvent("W_GroundMapEnter")
            end
        elseif returnType == SAFE_POS_RETURN_TYPE_CROUCH then
            FireEvent("W_CrouchMapEnter")
        elseif returnType == SAFE_POS_RETURN_TYPE_SWIM then
            FireEvent("W_SwimMapEnter")
        elseif returnType == SAFE_POS_RETURN_TYPE_DIVE then
            FireEvent("W_DiveMapEnter")
        else
            FireEvent("W_GroundFallReturn")
        end
    elseif loadInitPose ~= LOAD_INIT_POSE_NONE then
        if loadInitPose == LOAD_INIT_POSE_STAND then
            if env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
                FireEvent("W_AgingMapEnter")
            else
                FireEvent("W_GroundMapEnter")
            end
        elseif loadInitPose == LOAD_INIT_POSE_CROUCH then
            FireEvent("W_CrouchMapEnter")
        elseif loadInitPose == LOAD_INIT_POSE_SWIM then
            FireEvent("W_SwimMapEnter")
        elseif loadInitPose == LOAD_INIT_POSE_DIVE then
            FireEvent("W_DiveMapEnter")
        else
            FireEvent("W_GroundMapEnter")
        end
    elseif env(3037) == FALSE or env(3036, SP_EF_REF_FORCE_CROUCH) == TRUE then
        FireEvent("W_CrouchMapEnter")
    elseif env("特殊効果発動中か_Behavior参照ID_寿命延長を厳密に取得", SP_EF_REF_AGING) == TRUE then
        FireEvent("W_AgingMapEnter")
    elseif env(3036, SP_EF_REF_REDO_BELL_RETURN) == TRUE then
        FireEvent("W_Event250701")
    else
        FireEvent("W_GroundMapEnter")
    end
end

function UpdateState(current_hkb_state)
    Control(current_hkb_state)
    Validate(current_hkb_state)
    FireStateEndEvent(current_hkb_state)
end

function UpdateAddState(current_hkb_add_state)
    if env(339, 0) == TRUE then
        if current_hkb_add_state == HKB_STATE_ADD_SUB_WEAPON_CHANGE then
            g_EndSubWeaponChange = TRUE
            SetVariable("AddSubWeaponChangeBlend", 0)
        elseif current_hkb_add_state == HKB_STATE_ADD_ADD_BLEND_SPEAK then
            SetVariable("AddBlendSpeakIndex", GetRandomIndex(2, hkbGetVariable("AddBlendSpeakIndex")))
        end
    end
end

function Control(current_hkb_state)
    local currentStyle = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STYLE_TYPE]
    local currentState = g_paramHkbState[current_hkb_state][PARAM_HKB_STATE__STATE_TYPE]
    g_AddElectroCharge = FALSE
    if env(3037) == TRUE and env(3036, SP_EF_REF_FORCE_CROUCH) == FALSE then
        g_forceCrouch = FALSE
    else
        g_forceCrouch = TRUE
    end
    if g_beforeFireLand >= 0 then
        if g_beforeFireLand >= 3 then
            g_beforeFireLand = -1
        else
            g_beforeFireLand = g_beforeFireLand + 1
        end
    end
    if currentState == STATE_TYPE_ACTION_THROW_ATK or currentState == STATE_TYPE_ACTION_THROW_ATK_KILL then
        if env(337) == FALSE then
            SetVariable("CurrentThrowAnimId", hkbGetVariable("Selector_ThrowAnimId"))
            if false then
            end
        end
    else
        SetVariable("CurrentThrowAnimId", -1)
    end
    local event_id = env(105, 1)
    if event_id == 710200 or event_id == 710201 or event_id == 710203 or event_id == 710200 or event_id == 710201 or event_id == 710203 or event_id == 710204 or event_id == 710205 or event_id == 710206 or event_id == 710207 then
        act(139)
        FireEvent("W_Event" .. event_id)
        return TRUE
    end
    local enableFallMove = TRUE
    if current_hkb_state == HKB_STATE_STAND_IDLE or current_hkb_state == HKB_STATE_STAND_RUN_STOP or current_hkb_state == HKB_STATE_STAND_WALK_STOP or current_hkb_state == HKB_STATE_CROUCH_IDLE or current_hkb_state == HKB_STATE_DEFLECT_GUARD_IDLE or current_hkb_state == HKB_STATE_AGING_IDLE then
        act(2015, 60, 60)
    end
    if current_hkb_state == HKB_STATE_STAND_IDLE or current_hkb_state == HKB_STATE_STAND_RUN_STOP or current_hkb_state == HKB_STATE_STAND_WALK_STOP or current_hkb_state == HKB_STATE_CROUCH_IDLE or current_hkb_state == HKB_STATE_DEFLECT_GUARD_IDLE or current_hkb_state == HKB_STATE_AGING_IDLE then
        act(2015, 60, 60)
    end
    if (current_hkb_state == HKB_STATE_GROUND_JUMP_READY or current_hkb_state == HKB_STATE_SWAMP_JUMP_READY) and hkbGetVariable("Selector_GroundJumpType") ~= SELECTOR_GROUND_JUMP_TYPE_VERTICAL then
        act(2018)
    end
    if g_enableTransitSprint == TRUE then
        if current_hkb_state ~= HKB_STATE_GROUND_STEP then
            g_enableTransitSprint = FALSE
        elseif env(1108, ACTION_ARM_SP_MOVE) <= 0 and env(3036, SP_EF_REF_TAE_INPUT_CHECK_SPRINT) == TRUE then
            g_enableTransitSprint = FALSE
        end
    end
    if currentState == STATE_TYPE_STANDBY then
        if env(201) == TRUE then
            act(101, TRUE)
            if g_isUpperAction == FALSE then
                act(9100)
            end
            _SpeedUpdate(current_hkb_state)
        else
            act(9100)
        end
        if g_autoAimFlag == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_LOWER then
        g_isUpperAction = TRUE
        act(101, TRUE)
        _SpeedUpdate(current_hkb_state)
    elseif currentState == STATE_TYPE_UPPER_STANDBY then
        act(101, TRUE)
        act(9100)
        _SpeedUpdate(current_hkb_state)
        if g_autoAimFlag == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_STANDBY_GUARD or currentState == STATE_TYPE_STANDBY_SUB_GUARD then
        act(2002, SP_EFFECT_STYLE_DEFLECT_GUARD)
        act(101, TRUE)
        act(9100)
        _SpeedUpdate(current_hkb_state)
        if g_autoAimFlag == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_STANDBY_ATK or currentState == STATE_TYPE_STANDBY_ATK_HOLD then
        act(101, TRUE)
        act(9100)
        _SpeedUpdate(current_hkb_state)
    elseif currentState == STATE_TYPE_ACTION_ATK or currentState == STATE_TYPE_ACTION_THROW_ATK or currentState == STATE_TYPE_ACTION_THROW_ATK_KILL or currentState == STATE_TYPE_ACTION_ATK_HOLD or currentState == STATE_TYPE_UPPER_ACTION_ATK then
        if _IsNpcWeapon() ~= TRUE then
            act(9103, 1)
        else
            act(9103, hkbGetVariable("NTCAnimId_NpcSpAttack"))
        end
        if g_autoAimFlag == TRUE and env(2000) == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_ACTION_GUARD or currentState == STATE_TYPE_ACTION_SUB_GUARD then
        act(2002, SP_EFFECT_STYLE_DEFLECT_GUARD)
        if g_autoAimFlag == TRUE and env(2000) == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_ACTION_ITEM_USE or currentState == STATE_TYPE_UPPER_ACTION_ITEM_USE then
        if env(3036, SP_EF_REF_ACTIVE_TELESCOPE) == FALSE and env(2000) == FALSE then
            act(150)
        end
    elseif currentState == STATE_TYPE_UPPER_ACTION then
    elseif currentState == STATE_TYPE_ACTION then
    elseif currentState == STATE_TYPE_REACTION or currentState == STATE_TYPE_REACTION_ATK or currentState == STATE_TYPE_REACTION_ATK_HOLD or currentState == STATE_TYPE_REACTION_THROW_DEF or currentState == STATE_TYPE_REACTION_THROW_ESCAPE then
        if currentState == STATE_TYPE_REACTION_ATK then
            if _IsNpcWeapon() ~= TRUE then
                act(9103, 1)
            else
                act(9103, hkbGetVariable("NTCAnimId_NpcSpAttack"))
            end
        end
        if (currentStyle == STYLE_TYPE_STAND or currentStyle == STYLE_TYPE_CROUCH) and env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE then
            act(101, TRUE)
            _SpeedUpdate(current_hkb_state)
        end
        if g_autoAimFlag == TRUE and env(2000) == TRUE then
            _StopAutoAim()
        end
        if currentState == STATE_TYPE_REACTION_THROW_DEF then
            if env(3036, SP_EF_REF_TAE_SET_PRONE_DIR_FACE_DOWN_THROW_DEF) == TRUE then
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
            else
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_UP)
            end
        end
    elseif currentState == STATE_TYPE_REACTION_MAP_ENTER then
    elseif currentState == STATE_TYPE_REACTION_DEATH or currentState == STATE_TYPE_REACTION_DEATH_START or currentState == STATE_TYPE_REACTION_DEATH_LOOP or currentState == STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_START or currentState == STATE_TYPE_REACTION_THROW_DEATH_LOOP or currentState == STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP then
        act(3032)
        if currentState == STATE_TYPE_REACTION_THROW_DEATH_START then
            if env(3036, SP_EF_REF_TAE_SET_PRONE_DIR_FACE_DOWN_THROW_DEF) == TRUE then
                SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_B)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_DOWN)
            else
                SetVariable("Selector_FallDmgDir", SELECTOR_FALL_DMG_DIR_F)
                SetVariable("IndexDeath", DEATH_TYPE_COMMON)
                SetVariable("Selector_ProneDirection", SELECTOR_PRONE_DIR_FACE_UP)
            end
        end
    elseif currentState == STATE_TYPE_REACTION_GUARD or currentState == STATE_TYPE_REACTION_SUB_GUARD then
        act(2002, SP_EFFECT_STYLE_DEFLECT_GUARD)
        if g_autoAimFlag == TRUE and env(2000) == TRUE then
            _StopAutoAim()
        end
    elseif currentState == STATE_TYPE_EVENT then
        if env(339, 1) == FALSE then
            act(9102)
        end
        act(3032)
        if g_autoAimFlag == TRUE then
            _StopAutoAim()
        end
        if current_hkb_state == HKB_STATE_STATUE_INITIALIZE then
            act(2018)
        end
    elseif currentState == STATE_TYPE_EVENT_ENABLE_ACTION_BUTTON then
        if env(339, 1) == FALSE and current_hkb_state ~= HKB_STATE_EVENT390002 and current_hkb_state ~= HKB_STATE_EVENT711010 then
            act(9102)
        end
        act(138)
        act(3034, ACTION_BUTTON_EXEC_TYPE_TALK_SKIP)
        if current_hkb_state == HKB_STATE_EVENT390002 or current_hkb_state == HKB_STATE_EVENT711010 then
            act(3034, ACTION_BUTTON_EXEC_TYPE_BASE)
        end
        act(3032)
        if g_autoAimFlag == TRUE then
            _StopAutoAim()
        end
        if current_hkb_state == HKB_STATE_STATUE_ATTACH_START then
            act(2018)
        end
    elseif currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP or currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION or currentState == STATE_TYPE_EVENT_NPC_TALK_END or currentState == STATE_TYPE_EVENT_EAVESDROP_LOOP or currentState == STATE_TYPE_EVENT_EAVESDROP_END then
        if env(339, 1) == FALSE then
            act(9102)
        end
        act(138)
        act(3034, ACTION_BUTTON_EXEC_TYPE_TALK_SKIP)
        act(3032)
        if current_hkb_state == HKB_STATE_EVENT711300 then
            if env(3036, SP_EF_REF_TAE_CAMO_EVENT_STANDBY_STATE) == FALSE then
                act(3029, EZ_STATE_REF_SND_711300)
            end
        elseif currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP or currentState == STATE_TYPE_EVENT_NPC_TALK_REACTION or currentState == STATE_TYPE_EVENT_NPC_TALK_END then
            if current_hkb_state == HKB_STATE_EVENT711200 or current_hkb_state == HKB_STATE_EVENT711201 or current_hkb_state == HKB_STATE_EVENT711202 then
                act(3029, EZ_STATE_REF_SND_NPC_TALK_ENGRAVER)
            elseif current_hkb_state == HKB_STATE_EVENT711210 or current_hkb_state == HKB_STATE_EVENT711211 or current_hkb_state == HKB_STATE_EVENT711212 then
                act(3029, EZ_STATE_REF_SND_NPC_TALK_ENGRAVER_DUMMY)
            elseif current_hkb_state == HKB_STATE_EVENT711333 then
                act(3029, EZ_STATE_REF_SND_NPC_TALK_711333)
            else
                act(3029, EZ_STATE_REF_SND_NPC_TALK_LOOP)
            end
        elseif currentState == STATE_TYPE_EVENT_EAVESDROP_LOOP or currentState == STATE_TYPE_EVENT_EAVESDROP_END then
            act(3029, EZ_STATE_REF_SND_EAVESDROP_LOOP)
        end
        if currentState == STATE_TYPE_EVENT_NPC_TALK_LOOP then
            act(2018)
        end
    end
    if currentStyle == STYLE_TYPE_STAND then
        _LandReset()
        if current_hkb_state == HKB_STATE_SWIM_TO_STAND_MOVE then
            act(2018)
        end
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_BASE)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        elseif env(3036, SP_EF_REF_ACTIVE_TELESCOPE) == TRUE and env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
            act(147)
        end
        g_doneFallThrowTgtUpdate = FALSE
        if current_hkb_state == HKB_STATE_STAND_MOVE_START_FROM_SPRINT and env(3036, SP_EF_REF_TAE_RELEASE_LOCKON_ANGLE_LOCK) == TRUE then
            act(2018)
        end
        if GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        if env(3036, SP_EF_REF_IN_WATERSIDE_AREA) == TRUE then
            act(160, THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE)
            act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
        else
            act(160, THROWABLE_STATE_ATK_PC_STAND)
            act(161, THROWABLE_STATE_DEF_PC_GROUND)
        end
    elseif currentStyle == STYLE_TYPE_CROUCH then
        _LandReset()
        act(2002, SP_EFFECT_CROUCHING)
        if GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_BASE)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        elseif env(3036, SP_EF_REF_ACTIVE_TELESCOPE) == TRUE and env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
            act(147)
        end
        if g_forceCrouch == TRUE then
            act(160, THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE)
            act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
        else
            act(160, THROWABLE_STATE_ATK_PC_STAND)
            act(161, THROWABLE_STATE_DEF_PC_GROUND)
        end
    elseif currentStyle == STYLE_TYPE_GROUND_GUARD then
        _LandReset()
        act(2002, SP_EFFECT_STYLE_DEFLECT_GUARD)
        if GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        act(160, THROWABLE_STATE_ATK_PC_STAND)
        act(161, THROWABLE_STATE_DEF_PC_GROUND)
    elseif currentStyle == STYLE_TYPE_COVER then
        _LandReset()
        local edgeType = env(3017)
        if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
            SetVariable("Selector_Environment", SELECTOR_COVER_ENVIRONMENT_PEAK)
        else
            SetVariable("Selector_Environment", SELECTOR_COVER_ENVIRONMENT_NOMAL)
        end
        if currentState == STATE_TYPE_STANDBY or current_hkb_state == HKB_STATE_COVER_ACTION_END or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        end
        local edgeType = env(3017)
        if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_AIR_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_AIR_WIRE_SHOOT)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        act(160, THROWABLE_STATE_ATK_PC_STAND)
        act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
    elseif currentStyle == STYLE_TYPE_COVER_LOOK then
        _LandReset()
        local dir = hkbGetVariable("Selector_CoverLookDir")
        local edgeType = env(3017)
        if edgeType == COVER_EDGE_TYPE_PEAK_MOVE_DISABLE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_FREE_LOOK or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_LEFT_LOOK_ONLY or edgeType == COVER_EDGE_TYPE_PEAK_MOVE_RIGHT_LOOK_ONLY then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_AIR_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_AIR_WIRE_SHOOT)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        if currentState == STATE_TYPE_STANDBY or current_hkb_state == HKB_STATE_COVER_ACTION_START or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        end
        if dir == SELECTOR_COVER_LOOK_DIR_L then
            act(160, THROWABLE_STATE_ATK_PC_COVER_LOOK_L)
        else
            act(160, THROWABLE_STATE_ATK_PC_COVER_LOOK_R)
        end
        act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
    elseif currentStyle == STYLE_TYPE_HANG then
        _LandReset()
        act(160, THROWABLE_STATE_ATK_PC_HANG)
        act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
        act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_AIR_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_AIR_WIRE_SHOOT)
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        end
        local edgeType = env(3017)
        if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_HANG_TO_STAND, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_HANG_TO_STAND)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_HANG_TO_STAND, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_HANG_TO_STAND_FOOT_HOLD)
        end
        if edgeType == HANG_EDGE_TYPE_DISABLE_HOLD_FOOT then
            SetVariable("Selector_DockingTargetEdgeType", 0)
        else
            SetVariable("Selector_DockingTargetEdgeType", 1)
        end
    elseif currentStyle == STYLE_TYPE_SPRINT then
        _LandReset()
        if g_ValidateActionTable[BEH_A_GROUND_MOVE_STOP](current_hkb_state) == FALSE and g_ValidateActionTable[BEH_A_GROUND_STEP](current_hkb_state) == FALSE then
            act(2018)
        end
        if GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_UPSLOPE then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UPPER_SLOPE)
        elseif GetWireMoveStartIndex(current_hkb_state) == WIRE_MOVE_START_INDEX_VERTICAL then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_UP)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_GROUND_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_GROUND_WIRE_MOVE_START_VERTICAL)
        end
        if (currentState == STATE_TYPE_STANDBY or env(2000) == TRUE) and env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
            act(147)
        end
        act(160, THROWABLE_STATE_ATK_PC_STAND)
        act(161, THROWABLE_STATE_DEF_PC_GROUND)
    elseif currentStyle == STYLE_TYPE_FREE_FALL then
        act(3032)
        act(3035)
        if current_hkb_state == HKB_STATE_WALL_JUMP_START or current_hkb_state == HKB_STATE_BOUNCE_WALL_JUMP_READY or current_hkb_state == HKB_STATE_BOUNCE_WALL_JUMP_START then
            act(2018)
        end
        if current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_START or current_hkb_state == HKB_STATE_THROW_DEF_LARGE_BLOW_FALL_LOOP then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_AIR_BREAK_FALL_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_AIR_BREAK_FALL_WIRE_SHOOT)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_AIR_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_AIR_WIRE_SHOOT)
        end
        act(160, THROWABLE_STATE_ATK_PC_NORMAL_FALL)
        act(161, THROWABLE_STATE_DEF_PC_AIR)
    elseif currentStyle == STYLE_TYPE_WIRE_FALL then
        act(3032)
        act(3035)
        if current_hkb_state == HKB_STATE_WIRE_MOVE_WIRE_MOVE_START then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_WIRE_MOVE_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_WIRE_MOVE_WIRE_SHOOT_2)
        else
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_WIRE_MOVE_WIRE_SHOOT, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_WIRE_MOVE_WIRE_SHOOT)
        end
        act(160, THROWABLE_STATE_ATK_PC_WIRE_FALL)
        act(161, THROWABLE_STATE_DEF_PC_AIR)
    elseif currentStyle == STYLE_TYPE_CLING then
        act(160, THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE)
        act(161, THROWABLE_STATE_DEF_COMMON_IMPOSSIBLE)
    elseif currentStyle == STYLE_TYPE_SWIM or currentStyle == STYLE_TYPE_AGING_SWIM then
        _LandReset()
        if current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_GUARD_START and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_GUARD_LOOP and current_hkb_state ~= HKB_STATE_SWIM_GUARD_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_SWIM_GUARD_QUICK_TURN_RIGHT_180 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_1 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_2 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_3 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_1_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_2_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_3_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_KICK_MOVE_ATTACK then
            act(101, TRUE)
        end
        act(3037)
        if current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_1 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_1_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_2 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_2_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_3 and current_hkb_state ~= HKB_STATE_SWIM_ATTACK_COMBO_3_RELEASE and current_hkb_state ~= HKB_STATE_SWIM_KICK_MOVE_ATTACK and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_GUARD_START and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_GUARD_LOOP and current_hkb_state ~= HKB_STATE_SWIM_KICK_MOVE_GUARD_START and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_EASY_SMALL and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_HARD_SMALL and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_EASY_LARGE and current_hkb_state ~= HKB_STATE_SWIM_DEFLECT_HARD_LARGE and current_hkb_state ~= HKB_STATE_SWIM_GUARD_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_SWIM_GUARD_QUICK_TURN_RIGHT_180 then
            act(2018)
        end
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_BASE)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_EAVESDROP)
        end
        act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_SWIM_TO_DIVE, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_SWIM_TO_DIVE)
        if current_hkb_state == HKB_STATE_DIVE_TO_SWIM then
            act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_DIVE_TO_SWIM, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_DIVE_TO_AIR_2)
        end
        act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_SWIM_WIRE_MOVE_START, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_SWIM_WIRE_MOVE_START)
        act(160, THROWABLE_STATE_ATK_COMMON_IMPOSSIBLE)
        act(161, THROWABLE_STATE_DEF_PC_SWIM)
    elseif currentStyle == STYLE_TYPE_DIVE or currentStyle == STYLE_TYPE_AGING_DIVE then
        if current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_GUARD_START and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_GUARD_LOOP and current_hkb_state ~= HKB_STATE_DIVE_GUARD_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_DIVE_GUARD_QUICK_TURN_RIGHT_180 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_1 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_2 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_3 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_1_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_2_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_3_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_ATTACK then
            act(101, TRUE)
        end
        if current_hkb_state == HKB_STATE_DIVE_MOVE_UP_START or current_hkb_state == HKB_STATE_DIVE_MOVE_UP_LOOP or current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_START or current_hkb_state == HKB_STATE_DIVE_MOVE_DOWN_LOOP or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_UP_2 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_1 or current_hkb_state == HKB_STATE_DIVE_KICK_MOVE_DOWN_2 then
            _DiveSpeedUpdate(current_hkb_state)
        end
        act(3011)
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
            act(3034, ACTION_BUTTON_EXEC_TYPE_DIVE_BASE)
        end
        if current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_1 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_1_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_2 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_2_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_3 and current_hkb_state ~= HKB_STATE_DIVE_ATTACK_COMBO_3_RELEASE and current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_ATTACK and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_GUARD_START and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_GUARD_LOOP and current_hkb_state ~= HKB_STATE_DIVE_KICK_MOVE_GUARD_START and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_EASY_SMALL and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_HARD_SMALL and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_EASY_LARGE and current_hkb_state ~= HKB_STATE_DIVE_DEFLECT_HARD_LARGE and current_hkb_state ~= HKB_STATE_DIVE_GUARD_QUICK_TURN_LEFT_180 and current_hkb_state ~= HKB_STATE_DIVE_GUARD_QUICK_TURN_RIGHT_180 then
            act(2018)
        end
        act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_DIVE_TO_SWIM, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_DIVE_TO_SWIM)
        act(3023, MOVE_DISTANCE_PRE_CALCULATE_TYPE_DIVE_TO_SWIM, MOVE_DISTANCE_PRE_CALCULATE_ANIM_ID_DIVE_TO_AIR)
        act(160, THROWABLE_STATE_ATK_PC_DIVE)
        act(161, THROWABLE_STATE_DEF_PC_DIVE)
    elseif currentStyle == STYLE_TYPE_AGING_STAND then
        _LandReset()
        if current_hkb_state ~= HKB_STATE_AGING_GROUND_ATTACK then
            act(2018)
        end
        if currentState == STATE_TYPE_STANDBY or env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE) == TRUE or env(2000) == TRUE then
            if env(3036, SP_EF_REF_DISABLE_USE_ITEM_REQUEST) == FALSE and env(3036, SP_EF_REF_DISABLE_ALL_INPUT) == FALSE and env(3036, SP_EF_REF_TAE_DISABLE_MAIN_MENU) == FALSE then
                act(147)
            end
            act(138)
            act(3034, ACTION_BUTTON_EXEC_TYPE_BASE)
            act(3034, ACTION_BUTTON_EXEC_TYPE_ITEM_PICK)
        end
        act(160, THROWABLE_STATE_ATK_PC_AGING)
        act(161, THROWABLE_STATE_DEF_PC_GROUND)
    elseif currentStyle == STYLE_TYPE_AGING_FALL then
        act(2018)
        act(160, THROWABLE_STATE_ATK_PC_AGING_FALL)
        act(161, THROWABLE_STATE_DEF_PC_AIR)
    end
    local f19_local9 = {[ACTION_ARM_WALL_HANG] = FALSE, [ACTION_ARM_JUMP] = FALSE, [ACTION_ARM_SP_MOVE] = FALSE}
    local isMoveable = env(2000)
    local isStandby = env(1105)
    local isCamoStandby = env(3036, SP_EF_REF_TAE_CAMO_STANDBY_STATE)

    local _enableActionGuide = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD or currentState ~= STATE_TYPE_REACTION_DEATH and currentState ~= STATE_TYPE_REACTION_DEATH_START and currentState ~= STATE_TYPE_REACTION_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_START and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_LOOP and currentState ~= STATE_TYPE_REACTION_THROW_DEATH_REVIVAL_STAY_LOOP and currentState ~= STATE_TYPE_EVENT_NPC_TALK_LOOP and currentState ~= STATE_TYPE_EVENT_EAVESDROP_LOOP and currentState ~= STATE_TYPE_STANDBY_SUB_GUARD and currentState ~= STATE_TYPE_ACTION_SUB_GUARD and currentState ~= STATE_TYPE_REACTION_SUB_GUARD and (isMoveable == TRUE or currentState ~= STATE_TYPE_ACTION_THROW_ATK) and (isMoveable == TRUE or currentState ~= STATE_TYPE_ACTION_THROW_ATK_KILL) and (isMoveable == TRUE or currentState ~= STATE_TYPE_REACTION_THROW_DEF) and (isMoveable == TRUE or currentState ~= STATE_TYPE_REACTION_THROW_ESCAPE) and (isMoveable == TRUE or currentState ~= STATE_TYPE_EVENT) and (isMoveable == TRUE or currentState ~= STATE_TYPE_EVENT_ENABLE_ACTION_BUTTON) and (isMoveable == TRUE or currentState ~= STATE_TYPE_EVENT_NPC_TALK_END) and (isMoveable == TRUE or currentState ~= STATE_TYPE_EVENT_EAVESDROP_END) then
            return TRUE
        end
        return FALSE
    end

    local f19_local14 = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE or (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG2) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_1_BACK) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_2_BACK) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_FOOT_HOLD_1) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_FOOT_HOLD_2) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_FOOT_HOLD_1_BACK) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_HANG_FOOT_HOLD_2_BACK) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_RIGHT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD_RIGHT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_LONG_RANGE) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_LONG_RANGE_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_LONG_RANGE_RIGHT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD_LONG_RANGE) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD_LONG_RANGE_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_FREE_FALL_TO_HANG_FOOT_HOLD_LONG_RANGE_RIGHT) and current_hkb_state ~= HKB_STATE_GROUND_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_GROUND_WIRE_MOVE_READY and current_hkb_state ~= HKB_STATE_SPRINT_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_SPRINT_WIRE_MOVE_READY and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_GROUND_WIRE_MOVE_START) and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_SPRINT_WIRE_MOVE_START) then
            return TRUE
        end
        return FALSE
    end

    local f19_local15 = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE or current_hkb_state ~= HKB_STATE_AIR_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_AIR_WIRE_MOVE_READY and current_hkb_state ~= HKB_STATE_AIR_BREAK_FALL_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_AIR_BREAK_FALL_WIRE_MOVE_READY and current_hkb_state ~= HKB_STATE_WIRE_MOVE_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_WIRE_MOVE_WIRE_2_SHOOT and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_AIR_WIRE_MOVE_START) and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_AIR_BREAK_FALL_WIRE_MOVE_START) and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_WIRE_MOVE_WIRE_MOVE_START) and (isCamoStandby == TRUE or current_hkb_state ~= HKB_STATE_WIRE_MOVE_WIRE_2_MOVE_START) then
            return TRUE
        end
        return FALSE
    end

    local f19_local16 = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE or (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_COVER_2_BACK) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_COVER_2_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_COVER_2_RIGHT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_COVER_2_LEFT_180) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_STAND_TO_COVER_2_RIGHT_180) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_MOVE_TO_COVER_LEFT) and (isMoveable == TRUE or current_hkb_state ~= HKB_STATE_MOVE_TO_COVER_RIGHT) then
            return TRUE
        end
        return FALSE
    end

    local f19_local17 = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE or isMoveable == TRUE or current_hkb_state ~= HKB_STATE_DIVE_TO_SWIM then
            return TRUE
        end
        return FALSE
    end

    local f19_local18 = function (isStandby, isMoveable, currentState)
        if isStandby == TRUE or isMoveable == TRUE or current_hkb_state ~= HKB_STATE_SWIM_TO_DIVE then
            return TRUE
        end
        return FALSE
    end

    if g_behaviorTable[BEH_A_COVER_START][currentStyle] == TRUE then
        act(3026)
        if f19_local9[ACTION_ARM_WALL_HANG] == FALSE and g_forceCrouch == FALSE and env(3043) == TRUE and env(3036, SP_EF_REF_TAE_DISABLE_COVER_START) == FALSE and env(3008) == FALSE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
            act(3030, ACTION_GUIDE_COVER_START, ACTION_ARM_WALL_HANG)
            f19_local9[ACTION_ARM_WALL_HANG] = TRUE
        end
    end
    if g_behaviorTable[BEH_A_COVER_END][currentStyle] == TRUE and f19_local9[ACTION_ARM_WALL_HANG] == FALSE and f19_local16(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
        act(3030, ACTION_GUIDE_COVER_END, ACTION_ARM_WALL_HANG)
        f19_local9[ACTION_ARM_WALL_HANG] = TRUE
    end
    if g_behaviorTable[BEH_A_GROUND_HANG_START][currentStyle] == TRUE then
        act(3027)
        if f19_local9[ACTION_ARM_WALL_HANG] == FALSE and env(3044) == TRUE and env(3008) == FALSE and f19_local14(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
            act(3030, ACTION_GUIDE_HANG_START, ACTION_ARM_WALL_HANG)
            f19_local9[ACTION_ARM_WALL_HANG] = TRUE
        end
    end
    if g_behaviorTable[BEH_A_HANG_CLIMB][currentStyle] == TRUE and f19_local9[ACTION_ARM_WALL_HANG] == FALSE and env(3050) == TRUE and f19_local14(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
        act(3030, ACTION_GUIDE_HAMG_TO_STAND, ACTION_ARM_WALL_HANG)
        f19_local9[ACTION_ARM_WALL_HANG] = TRUE
    end
    if g_behaviorTable[BEH_A_HANG_FALL][currentStyle] == TRUE and f19_local9[ACTION_ARM_SP_MOVE] == FALSE and f19_local14(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
        act(3030, ACTION_GUIDE_HAMG_TO_FALL, ACTION_ARM_SP_MOVE)
        f19_local9[ACTION_ARM_SP_MOVE] = TRUE
    end
    if g_behaviorTable[BEH_A_AIR_HANG_START][currentStyle] == TRUE then
        act(3028)
        if f19_local9[ACTION_ARM_WALL_HANG] == FALSE and env(3045) ~= AIR_HANG_TYPE_DISABLE and f19_local15(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
            act(3030, ACTION_GUIDE_HANG_START, ACTION_ARM_WALL_HANG)
            f19_local9[ACTION_ARM_WALL_HANG] = TRUE
        end
    end
    if g_behaviorTable[BEH_R_DIVE_TO_SWIM][currentStyle] == TRUE and f19_local9[ACTION_ARM_JUMP] == FALSE and env(3039) == TRUE and f19_local18(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
        act(3030, ACTION_GUIDE_DIVE_TO_SWIM, ACTION_ARM_JUMP)
        f19_local9[ACTION_ARM_JUMP] = TRUE
    end
    if g_behaviorTable[BEH_A_SWIM_TO_DIVE][currentStyle] == TRUE and f19_local9[ACTION_ARM_SP_MOVE] == FALSE and env(3038) == TRUE and env(3033, ACTION_UNLOCK_TYPE_DIVE) == TRUE and env(3008) == FALSE and f19_local17(isStandby, isMoveable, currentState) == TRUE and _enableActionGuide(isStandby, isMoveable, currentState) == TRUE then
        act(3030, ACTION_GUIDE_SWIM_TO_DIVE, ACTION_ARM_SP_MOVE)
        f19_local9[ACTION_ARM_SP_MOVE] = TRUE
    end
    _UpdateFallProtection(current_hkb_state)
    _UpdateAutoAim()
    _UpdateThrowAnimSelector()
    _UpdateNextThrowInfo(current_hkb_state)
    local groundJumpType = hkbGetVariable("Selector_GroundJumpType")
    if (current_hkb_state == HKB_STATE_GROUND_JUMP_READY or current_hkb_state == HKB_STATE_GROUND_JUMP_START or current_hkb_state == HKB_STATE_SWAMP_JUMP_START or current_hkb_state == GROUND_JUMP_FALL) and groundJumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON or (current_hkb_state == HKB_STATE_GROUND_KICK_ENEMY_JUMP_START or current_hkb_state == HKB_STATE_AIR_KICK_ENEMY_JUMP_START) and (groundJumpType == SELECTOR_GROUND_JUMP_TYPE_VERTICAL or groundJumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD or groundJumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON) or (current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_READY or current_hkb_state == HKB_STATE_SPRINT_SPECIAL_ATTACK_JUMP_READY or current_hkb_state == HKB_STATE_GROUND_SPECIAL_ATTACK_JUMP_START) and groundJumpType == SELECTOR_GROUND_JUMP_TYPE_FORWARD_LOCKON then
        act(3019, 1)
    end
    if env(3036, SP_EF_REF_TAE_ENABLE_SP_STATE_TO_STATE_BLEND) == TRUE and hkbGetVariable("MoveSpeedLevel") > 0 and (hkbGetVariable("MoveSpeedIndex") ~= g_beforeMoveSpeedIndex or hkbGetVariable("MoveDirection") ~= g_beforeMoveDirection) then
        act(2002, SP_EFFECT_SP_STATE_TO_STATE_BLEND)
    end
    if env(3036, SP_EF_REF_SP_STATE_TO_STATE_BLEND) == TRUE then
        SetVariable("Selector_UseStaterToStateTransitionEffect", SELECTOR_USE_STS_TE_TAE_BLEND)
    else
        SetVariable("Selector_UseStaterToStateTransitionEffect", SELECTOR_USE_STS_TE_STATE_TO_STATE_BLEND_IGNORE_TO_WORLD)
    end
    if currentStyle == STYLE_TYPE_WIRE_FALL or current_hkb_state == HKB_STATE_GROUND_WIRE_SHOOT or current_hkb_state == HKB_STATE_GROUND_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_AIR_WIRE_SHOOT or current_hkb_state == HKB_STATE_AIR_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_AIR_BREAK_FALL_WIRE_SHOOT or current_hkb_state == HKB_STATE_AIR_BREAK_FALL_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_AIR_BREAK_FALL_WIRE_MOVE_START or current_hkb_state == HKB_STATE_SPRINT_WIRE_SHOOT or current_hkb_state == HKB_STATE_SPRINT_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_SWIM_WIRE_MOVE_READY or current_hkb_state == HKB_STATE_SWIM_WIRE_MOVE_START then
        act(3018, 1)
    end
    if current_hkb_state ~= HKB_STATE_GROUND_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_GROUND_WIRE_MOVE_READY and current_hkb_state ~= HKB_STATE_SPRINT_WIRE_SHOOT and current_hkb_state ~= HKB_STATE_SPRINT_WIRE_MOVE_READY and current_hkb_state ~= HKB_STATE_AIR_WIRE_SHOOT and current_hkb_state == HKB_STATE_AIR_WIRE_MOVE_READY then
    end
    if env(3036, SP_EF_REF_TAE_LOCK_TARGET_GEN_SP_SOUND_SHOT) == TRUE then
        act(3004, SP_EFFECT_SOUND_SHOT_TARGET)
    end
    if env(3058) == ADD_BLEND_SPEAK_PLAY and IsNodeActive("AddBlendSpeak_0_CMSG", "AddBlendSpeak_1_CMSG", "AddBlendSpeak_2_CMSG") == FALSE then
        SetVariable("AddBlendSpeakIndex", math.random(0, 2))
        FireEventNoReset("W_AddBlendSpeakFadeIn")
    end
    if env(3058) == ADD_BLEND_SPEAK_NONE and IsNodeActive("AddBlendSpeak_0_CMSG", "AddBlendSpeak_1_CMSG", "AddBlendSpeak_2_CMSG") == TRUE then
        FireEventNoReset("W_AddBlendSpeakFadeOut")
    end
end

global = {}

function dummy()
end

global.__index = function (table, element)
    return dummy
end

setmetatable(_G, global)
